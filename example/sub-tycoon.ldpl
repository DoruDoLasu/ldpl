DATA:
n-temp is number           #Variable temporal para operaciones numéricas
n-temp1 is number          #Variable temporal para operaciones numéricas
t-temp is text             #Variable temporal de texto
t-temp1 is text            #Variable temporal de texto
player-name is text
pan is number
jamón is number
queso is number
pepino is number
ubicación is number
dinero is number
nombre-ubicación is text
comando is number
queso-receta is number
jamón-receta is number
pepino-receta is number
precios-ingredientes is number vector
cantidades-ingredientes is number vector
error is text    # Mensaje de error
precio-sánguche is number
chances-ubicacion is number vector
hora is number

PROCEDURE:
# Limpio la pantalla y muestro cartel del juego
execute "clear"
display "**********************" crlf
display "*  SANDWICH  TYCOON  *" crlf
display "* por Martín del Río *" crlf
display "**********************" crlf crlf

# Pido nombre del jugador
store 0 in n-temp
while n-temp is equal to 0 do
    display "¿Cuál es tu nombre?: "
    accept player-name
    store length of player-name in n-temp
    if n-temp is greater than 0 then
        break
    end if
    display "¡Ey! ¡Ingresa tu nombre!" crlf crlf
repeat

# Le doy la introducción
display crlf "¡Bienvenido a Sandwich Tycoon, " player-name "!" crlf
display "El objetivo del juego es hacer una fortuna vendiendo sánguches." crlf
display "Para esto tenés que descubrir una buena receta de sánguches, " crlf
display "comprar ingredientes, equipo, contratar empleados y descubrir" crlf
display "dónde conviene vender y dónde no. ¿Listo?" crlf
display crlf "(oprime ENTER para continuar...)"
accept t-temp

# Genero los recursos iniciales del jugador
store 40 in dinero
store 10 in pan
store 0 in jamón-receta
store 0 in queso-receta
store 0 in pepino-receta
store 2 in precio-sánguche

#Sub que muestra los ingredientes del jugador
SUB-PROCEDURE ingredientes
    display "Stock de ingredientes:" crlf
    display "| Panes: " pan " · Jamón: " jamón crlf 
    display "| Queso: " queso " · Pepino: " pepino crlf crlf
END SUB-PROCEDURE

# Sub que muestra un error en pantalla
SUB-PROCEDURE mostrar-error
  display error crlf
  store 0 in n-temp
  while n-temp is less than 20000 do
    add 1 and n-temp in n-temp
  repeat
END SUB-PROCEDURE

# Sub que determina si hay random events
SUB-PROCEDURE random-events
  # Veo si se pudre el jamón
  store random in n-temp
  multiply n-temp by 5 in n-temp
  floor n-temp
  if n-temp is equal to 0 then
    store random in n-temp
    multiply n-temp by jamón in n-temp
    floor n-temp
    display "* Se han echado a perder " n-temp " jamones." crlf
    subtract n-temp from jamón in jamón
  end if

  # Veo si se pudre el queso
  store random in n-temp
  multiply n-temp by 5 in n-temp
  floor n-temp
  if n-temp is equal to 0 then
    store random in n-temp
    multiply n-temp by queso in n-temp
    floor n-temp
    display "* Se han echado a perder " n-temp " fetas de queso." crlf
    subtract n-temp from queso in queso
  end if

  # Veo si se pudren los pickles
  store random in n-temp
  multiply n-temp by 50 in n-temp
  floor n-temp
  if n-temp is equal to 0 then
    display "* Se han echado a perder todos los pepinos." crlf
    store 0 in pepino
  end if
END SUB-PROCEDURE

# Sub que te da en nombre-ubicación el nombre de la ubicación actual
SUB-PROCEDURE dame-nombre-ubicación
  if ubicación is equal to 0 then
    store "Suburbios" in nombre-ubicación
    return
  end if
  if ubicación is equal to 1 then
    store "Parque" in nombre-ubicación
    return
  end if
  if ubicación is equal to 2 then
    store "Centro" in nombre-ubicación
    return
  end if
  if ubicación is equal to 3 then
    store "Estación" in nombre-ubicación
    return
  end if
  if ubicación is equal to 4 then
    store "Centro comercial" in nombre-ubicación
    return
  end if
END SUB-PROCEDURE

# Sub que dibuja la GUI de la tienda
SUB-PROCEDURE dibujar-gui-tienda
while 1 is equal to 1 do
    execute "clear"
    display " -= Puesto de sánguches de " player-name " =-" crlf
    call sub-procedure ingredientes
    display "-=-=-=-= Almacén de Ingredientes =-=-=-=-" crlf
    display "Tenés $" dinero crlf
    display "Precios:" crlf
    display "( 1) 10 panes:   $15  · ( 2) 30 panes:   $40  · ( 3) 100 panes:   $100" crlf
    display "( 4) 10 quesos:  $20  · ( 5) 30 quesos:  $50  · ( 6) 100 quesos:  $140" crlf
    display "( 7) 10 jamones: $25  · ( 8) 30 jamones: $65  · ( 9) 100 jamones: $180" crlf
    display "(10) 10 pepinos: $12  · (11) 30 pepinos: $30  · (12) 100 pepinos: $80" crlf 
    display crlf "Ingresá el número de lo que deseas comprar (1-12) o 0 para salir." crlf
    display crlf "Comando: "
    
    # Cantidades vendidas
    store 10 in cantidades-ingredientes:0
    store 30 in cantidades-ingredientes:1
    store 100 in cantidades-ingredientes:2

    # Precios de los ingredientes
    store 15 in precios-ingredientes:1
    store 40 in precios-ingredientes:2
    store 100 in precios-ingredientes:3
    store 20 in precios-ingredientes:4
    store 50 in precios-ingredientes:5
    store 140 in precios-ingredientes:6
    store 25 in precios-ingredientes:7
    store 65 in precios-ingredientes:8
    store 180 in precios-ingredientes:9
    store 12 in precios-ingredientes:10
    store 30 in precios-ingredientes:11
    store 80 in precios-ingredientes:12

    accept comando
    if comando is equal to 0 then
      break
    else
      if comando is greater than 12 then
        store "¡Ingresá un número del 0 al 12!" in error
        call sub-procedure mostrar-error
      else
        if dinero is greater than or equal to precios-ingredientes:comando then
          subtract precios-ingredientes:comando from dinero in dinero
          # Guardo en comando el ingrediente a comprar (0 pan, 1 queso, 2 jamón, 3 pepino)
          # Guardo en n-temp el subíndice de la cantidad a comprar
      subtract 1 from comando in n-temp
          modulo n-temp by 3 in n-temp
          divide comando by 3 in comando
          floor comando
          if comando is equal to 0 then
            add cantidades-ingredientes:n-temp and pan in pan
          end if
          if comando is equal to 1 then
            add cantidades-ingredientes:n-temp and queso in queso
          end if
          if comando is equal to 2 then
            add cantidades-ingredientes:n-temp and jamón in jamón
          end if
          if comando is equal to 3 then
            add cantidades-ingredientes:n-temp and pepino in pepino
          end if
        else
          store "¡No tenés tanto dinero como para comprar eso!" in error
          call sub-procedure mostrar-error
        end if
      end if
    end if
repeat
END SUB-PROCEDURE

# Sub que dibuja la receta
SUB-PROCEDURE dibujar-receta
while 1 is equal to 1 do
  execute "clear"
  display " -= Puesto de sánguches de " player-name " =-" crlf
  call sub-procedure ingredientes
  display "Receta:" crlf
  display "* 2 x pan" crlf
  display "* " jamón-receta " x jamón" crlf
  display "* " queso-receta " x queso" crlf
  display "* " pepino-receta " x pepinillos" crlf
  display "* Precio del sánguche: $" precio-sánguche crlf crlf
  display "Comandos: " crlf
  display "1. Cambiar la cantidad de jamón por sánguche." crlf
  display "2. Cambiar la cantidad de queso por sánguche." crlf
  display "3. Cambiar la cantidad de pepino por sánguche." crlf
  display "4. Cambiar precio por sánguche." crlf
  display "0. Salir" crlf crlf
  display "Comando: "
  accept comando
  if comando is equal to 0 then
    break
  end if
  if comando is equal to 1 then
    display "¿Cuánto jamón querés poner por sánguche?: "
    accept jamón-receta
  end if
  if comando is equal to 2 then
    display "¿Cuánto queso querés poner por sánguche?: "
    accept queso-receta
  end if
  if comando is equal to 3 then
    display "¿Cuánto pepino querés poner por sánguche?: "
    accept pepino-receta
  end if
  if comando is equal to 4 then
    display "¿Cuánto querés cobrar cada sánguche?: $"
    accept precio-sánguche
  end if
repeat
END SUB-PROCEDURE

# Sub en el que pasa un día
SUB-PROCEDURE dia
# Max clientes por hora por ubicación
store 5 in chances-ubicacion:0
store 8 in chances-ubicacion:1
store 15 in chances-ubicacion:2
store 20 in chances-ubicacion:3
store 30 in chances-ubicacion:4

# Hora
store 10 in hora

# ¿Viene un cliente?
while hora is less than or equal to 19 do 
 # Dibujo GUI
 execute "clear"
 display "Hora: " hora ":00 - Horario de cierre: 19:00" crlf crlf
 call sub-procedure ingredientes
 call sub-procedure dame-nombre-ubicación
 display "Dinero: $" dinero " · Ubicación: " nombre-ubicación crlf crlf
 
 # Veo cuántos clientes vienen
 store random in n-temp
 multiply n-temp by chances-ubicacion:ubicación in n-temp
 floor n-temp
 if n-temp is greater than 0 then
  display "Ha(n) venido " n-temp " cliente(s)!" crlf crlf
 else
  display "No ha venido nadie..." crlf crlf
 end if

 # Delay
 store 0 in n-temp
 while n-temp is less than 10000 do
  modulo n-temp by 2000 in n-temp1
  if n-temp1 is equal to 0 then
   display "."
  end if
  add 1 and n-temp in n-temp
 repeat
 add 1 and hora in hora 
repeat
END SUB-PROCEDURE

# Sub que dibuja la GUI
SUB-PROCEDURE dibujar-gui
  execute "clear"
  display " -= Puesto de sánguches de " player-name " =-" crlf
  call sub-procedure ingredientes
  call sub-procedure dame-nombre-ubicación
  display "Dinero: $" dinero " · Ubicación: " nombre-ubicación crlf crlf
  display "Menú:" crlf
  display "1. Modificar receta     · 5. Campañas publicitarias" crlf
  display "2. Comprar ingredientes · 6. Alquilar nuevo puesto" crlf
  display "3. Comprar equipo       · 7. Comenzar el día" crlf
  display "4. Contratar personal" crlf crlf
  display "Comando: "
  accept comando
  if comando is equal to 2 then
    call sub-procedure dibujar-gui-tienda
  end if
  if comando is equal to 1 then
    call sub-procedure dibujar-receta
  end if
  if comando is equal to 7 then
    call sub-procedure dia
  end if
END SUB-PROCEDURE

# Dibujo la GUI
while 1 is equal to 1 do
  call sub-procedure dibujar-gui
repeat
