#  _     _________  ___
# | |    | ___ \  \/  | 
# | |    | |_/ / .  . |   LDPL     |  by
# | |    |  __/| |\/| |   Package  |  Martín
# | |____| |   | |  | |   Manager  |  del Río
# \_____/\_|   \_|  |_/

data:
    VERSION is text
    LPMDIR is text
    LPMWEB is text
    PKGFILE is text
    argc is number
    auxText is text
    i is number
    packageList is text
    installedPackages is text list
    packageCount is number

procedure:
# --- Constants ---
store "1.0" in VERSION
store "https://www.ldpl-lang.org/lpm/" in LPMWEB
store "~/ldpl/lpm/" in LPMDIR
in PKGFILE join LPMDIR "package_list"

# --- LPM Initialization ---
in auxText join "mkdir -p " LPMDIR
execute auxText

# --- Command line argument check ---
get length of argv in argc
if argc is less than 1 or argv:0 is equal to "-h" or argv:0 is equal to "--help" then
    call help
    exit
else if argv:0 is equal to "-v" or argv:0 is equal to "--version" then
    call information
    exit
end if

# --- Load installed package list ---
call loadPackageList with installedPackages

# --- Install, search or uninstall ---
if argv:0 is equal to "install" then
    if argc is less than 2 then
        call error with "expecting a package name."
    else
        for i from 1 to argc step 1 do
            call install_package with argv:i
        repeat
    end if
else if argv:0 is equal to "search" or argv:0 is equal to "info" then
    if argc is less than 2 then
        call error with "expecting a package name."
    else
        for i from 1 to argc step 1 do
            call info_package with argv:i
        repeat
    end if
else if argv:0 is equal to "uninstall" or argv:0 is equal to "remove" then
    if argc is less than 2 then
        call error with "expecting a package name."
    else
        for i from 1 to argc step 1 do
            call uninstall_package with argv:i
        repeat
    end if
else if argv:0 is equal to "count" then
    if packageCount is equal to 1 then
        display "There is " packageCount " LDPL package installed on this system." crlf
    else
        display "There are " packageCount " LDPL packages installed on this system." crlf
    end if
else
    in auxText join "unknown option '" argv:0 "'."
    call error with auxText
end if

sub error
    parameters:
        errorMessage is text
    procedure:
        display "\033[31mLPM Error: " errorMessage "\033[0m" crlf
        exit
end sub

sub information
    display crlf
    display " This is LPM - the LDPL Package Manager - version " VERSION "." crlf
    display " Copyright 2019, Martín del Río (www.lartu.net)." crlf crlf
    display " Downloaded packages will be installed to " LPMDIR "." crlf
    display crlf
end sub

sub help
    display crlf
    display " \033[1;33mUsage:\033[0m" crlf
    display "     lpm install|uninstall|search <package_name>..." crlf
    display "     lpm -h|-v|count" crlf crlf
    display " \033[1;33mOptions:\033[0m" crlf
    display "     install          Installs one or more LDPL packages." crlf
    display "     uninstall        Uninstalls one or more LDPL packages." crlf
    display "     remove           Same as 'uninstall'." crlf
    display "     search           Displays information about one or more LDPL packages." crlf
    display "     info             Same as 'search'." crlf
    display "     count            Displays the number of installed LDPL packages." crlf
    display "     -v, --version    Displays LPM version information." crlf
    display "     -h, --help       Displays this help." crlf
    display crlf
end sub

sub package_is_installed
    parameters:
        packageName is text
        result is number
    local data:
        i is text
    procedure:
        for each i in installedPackages do
            if i is equal to packageName then
                store 1 in result
                return
            end if
        repeat
        store 0 in result
end sub

sub loadPackageList
    parameters:
        installedPackages is text list
    procedure:
        load file PKGFILE in packageList
        trim packageList in packageList
        if packageList is equal to "" then
            store 0 in packageCount
            clear installedPackages
        else
            split packageList by "\n" in installedPackages
            get length of installedPackages in packageCount
        end if
end sub

sub search_package
    parameters:
        packageName is text
        result is number
    local data:
        head is text
    procedure:
        in auxText join "curl --head -s " LPMWEB packageName ".tar"
        execute auxText and store output in head
        get index of "404" from head in result
        if result is equal to -1 then
            store 1 in result
        else
            store 0 in result
        end if
end sub

sub info_package
    parameters:
        packageName is text
    local data:
        info is text
        found is number
    procedure:
        display "Searching package '" packageName "'..." crlf
        call search_package with packageName found
        if found is equal to 0 then
            display "\033[31mPackage '" packageName "' not found.\033[0m" crlf
        else
            display "Fetching package information...\033[36m" crlf
            in auxText join "curl --silent " LPMWEB packageName ".info"
            execute auxText and store output in info
            trim info in info
            display info "\033[0m" crlf
        end if
end sub

sub install_package
    parameters:
        packageName is text
    local data:
        isInstalled is number
        found is number
        installResult is number
    procedure:
        call package_is_installed with packageName isInstalled
        if isInstalled is equal to 1 then
            display "\033[33mWarning: The package '" packageName "' is already installed." crlf
            display "         Attempting to reinstall.\033[0m" crlf
        end if
        display "Searching package '" packageName "'..." crlf
        call search_package with packageName found
        if found is equal to 0 then
            display "\033[31mPackage '" packageName "' not found. Abort install.\033[0m" crlf
        else
            display "Downloading package '" packageName "'...\033[35m" crlf
            in auxText join "cd " LPMDIR " && curl -O --progress-bar " LPMWEB packageName ".tar"
            execute auxText
            display "\033[0mPackage '" packageName "' downloaded." crlf
            display "Copying files..." crlf
            in auxText join "cd " LPMDIR " && mkdir -p " packageName " && tar -xf " packageName ".tar -C " packageName " && rm " packageName ".tar"
            execute auxText and store exit code in installResult
            if installResult is not equal to 0 then
                display "\033[31mCopy failed. Installation aborted.\033[0m" crlf
                return
            else
                if isInstalled is equal to 0 then
                    display "Adding package to local package list..." crlf
                    in packageList join packageList "\n" packageName
                    trim packageList in packageList
                    write packageList to file PKGFILE
                    call loadPackageList with installedPackages
                end if
                display "\033[32mPackage '" packageName "' installed successfully.\033[0m" crlf
            end if
        end if
end sub

sub uninstall_package
    parameters:
        packageName is text
    local data:
        isInstalled is number
        found is number
        unInstallResult is number
        i is number
    procedure:
        call package_is_installed with packageName isInstalled
        if isInstalled is equal to 0 then
            display "\033[31mThe package '" packageName "' is not installed.\033[0m" crlf
            return
        end if
        display "Deleting '" packageName "'..." crlf
        in auxText join "cd " LPMDIR " && rm -rf " packageName
        execute auxText and store exit code in unInstallResult
        if unInstallResult is not equal to 0 then
            display "\033[31mDelete failed. Couldn't uninstall.\033[0m" crlf
            return
        else
            display "Regenerating package list..." crlf
            store "" in packageList
            for i from 0 to packageCount step 1 do
                if installedPackages:i is not equal to packageName then
                    in packageList join packageList "\n" installedPackages:i
                end if
            repeat
            trim packageList in packageList
            write packageList to file PKGFILE
            call loadPackageList with installedPackages
            display "\033[32mPackage '" packageName "' uninstalled successfully.\033[0m" crlf
        end if
end sub